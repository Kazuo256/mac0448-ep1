
MAC0448-2012: Programação para Redes de Computadores.
Primeiro Exercício-Programa: Servidor HTTP

Alunos:                     Nº USP:
  Thiago de Gouveia Nunes     6797289
  Wilson Kazuo Mizutani       6797230


I. Organização dos arquivos.


  Nosso EP deve apresentar a seguinte organização de arquivos e pastas:

    ep1-thiago-wilson/
    |- Makefile
    |- objs.makefile
    |- deps.makefile
    |- LEIAME
    |- src/
    |  |- main.c
    |  |- ...demais arquivos de código fonte...
    |- www/
    |- |- exemplo.html
    |- |- post.html
    |- |- imagens/
    |- |- |- logoIME.png
      

II. Compilação.


  O programa vem com um Makefile para compilá-lo. Basta usar o comando

    $ make

  para compilar o EP normalmente, ou

    $ make debug

  para compilar com flags de depuração. Se o programa foi compilado normalmente
alguma vez antes, então é preciso usar

    $ make clean

  antes de tentar compilar no modo de depuração.


III. Dependências.


  As dependências do programa são as mesmas que havia no arquivo

    "ep1-servidor-exemplo.c"

  fornecido pelo professor. Em particular, aproveitamos em nosso código o fato
desse arquivo definir a macro _GNU_SOURCE, pois assim pudemos usar funções como
strtok_r() e gmtime_r(), que supostamente não são ANSI, mas são thread-safe, o
que é conveniente uma vez que o servidor faz um fork() para cada conexão.


IV. Modo de uso do programa.


  Nosso programa segue a mesma assinatura de linha de comando usada no servidor
de exemplo do professor:

    ./ep1 <porta>

  Onde:

    <porta>   É a porta na qual o servidor ficará ouvindo por conexões HTTP.

  Além disso, nosso servidor busca pelas páginas requisitadas na pasta www/.
Por exemplo, se o EP foi rodado na porta 1337, então

    localhost:1337/exemplo.html

  Buscará pelo arquivo ./www/exemplo.html (relativo ao "Current Working
Directory"). 
  O servidor reconhece apenas arquivos *.html e *.png, qualquer outra extensão
é enviada como "text/html" para o cliente por padrão. Os formatos HTML e PNG
eram os únicos necessários para que o método GET funcionasse como na página de
exemplo "http://ime.usp.br/~batista/disciplinas/mac0448+mac5910-exemplo.html".

V. Organização do código:


  Segue a descrição do que cada arquivo de código é responsável. O nome dos
arquivos é relativo à pasta src/, como visto na seção I desse LEIAME.

  main.c:

    Contém basicamente o arquivo de exemplo do professor com algumas mudanças,
  tanto na seção reservada para o código do EP quanto nos includes e nas
  declarações das variáveis da função main(). Só tiramos algumas variáveis que
  deixaram de ser necessárias para evitar warnings. Os includes são dos arquivos
  do nosso EP.

  ep1.h e ep1.c:

    Contém a lógica de mais alto nível do servidor HTTP. Aqui, o código limita-
  se a usar os módulos EP1_NET e EP1_SERVER (explicados adiante) para compor
  exatamente o mesmo loop de read-write que havia no exemplo do professor, só
  que com os detalhes de implementação encapsulados.

  ep1/net.h e ep1/net.c:

    É o módulo EP1_NET. Responsável por receber e enviar pacotes usando a API de
  sockets. Define a estrutura EP1_NET_packet que representa um pacote HTTP
  "bruto", isso é, da maneira como ele chegou da rede ou pronto para ser enviado
  para ela.

  ep1/server.h e ep1/server.c:

    É o módulo EP1_SERVER. Responsável pela lógica de mais baixo nível do
  servidor HTTP. Interpreta as requisições e constrói os pacotes de resposta
  a serem enviados, seguindo o protocolo HTTP dentro das especificações do
  enunciado.

  ep1/date.h e ep1/date.c:

    É o módulo EP1_DATE. Responsável por produzir strings de data formatadas,
  seguindo o padrão usado pelo Apache.


